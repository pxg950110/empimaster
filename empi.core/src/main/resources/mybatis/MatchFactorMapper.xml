<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="empi.core.dao.MatchFactorMapper">
  <resultMap id="BaseResultMap" type="empi.core.model.MatchFactor">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="property_id" jdbcType="INTEGER" property="propertyId" />
    <result column="positive_grede" jdbcType="INTEGER" property="positiveGrede" />
    <result column="negative_grade" jdbcType="INTEGER" property="negativeGrade" />
    <result column="threshold" jdbcType="DECIMAL" property="threshold" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_by" jdbcType="INTEGER" property="createBy" />
    <result column="last_update_time" jdbcType="TIMESTAMP" property="lastUpdateTime" />
    <result column="update_by" jdbcType="INTEGER" property="updateBy" />
    <result column="is_deleted" jdbcType="SMALLINT" property="isDeleted" />
    <result column="sort" jdbcType="INTEGER" property="sort" />
    <result column="property_code" jdbcType="VARCHAR" property="propertyCode" />
    <result column="property_name" jdbcType="VARCHAR" property="propertyName" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="empi.core.model.MatchFactor">
    <result column="match_function" jdbcType="LONGVARCHAR" property="matchFunction" />
    <result column="match_condition" jdbcType="LONGVARCHAR" property="matchCondition" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, property_id, positive_grede, negative_grade, threshold, create_time, create_by, 
    last_update_time, update_by, is_deleted, sort, property_code, property_name
  </sql>
  <sql id="Blob_Column_List">
    match_function, match_condition
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="empi.core.model.MatchFactorExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from match_factor
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="empi.core.model.MatchFactorExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from match_factor
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from match_factor
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from match_factor
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="empi.core.model.MatchFactorExample">
    delete from match_factor
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="empi.core.model.MatchFactor">
    insert into match_factor (id, property_id, positive_grede, 
      negative_grade, threshold, create_time, 
      create_by, last_update_time, update_by, 
      is_deleted, sort, property_code, 
      property_name, match_function, match_condition
      )
    values (#{id,jdbcType=INTEGER}, #{propertyId,jdbcType=INTEGER}, #{positiveGrede,jdbcType=INTEGER}, 
      #{negativeGrade,jdbcType=INTEGER}, #{threshold,jdbcType=DECIMAL}, #{createTime,jdbcType=TIMESTAMP}, 
      #{createBy,jdbcType=INTEGER}, #{lastUpdateTime,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=INTEGER}, 
      #{isDeleted,jdbcType=SMALLINT}, #{sort,jdbcType=INTEGER}, #{propertyCode,jdbcType=VARCHAR}, 
      #{propertyName,jdbcType=VARCHAR}, #{matchFunction,jdbcType=LONGVARCHAR}, #{matchCondition,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="empi.core.model.MatchFactor">
    insert into match_factor
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="propertyId != null">
        property_id,
      </if>
      <if test="positiveGrede != null">
        positive_grede,
      </if>
      <if test="negativeGrade != null">
        negative_grade,
      </if>
      <if test="threshold != null">
        threshold,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="lastUpdateTime != null">
        last_update_time,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="isDeleted != null">
        is_deleted,
      </if>
      <if test="sort != null">
        sort,
      </if>
      <if test="propertyCode != null">
        property_code,
      </if>
      <if test="propertyName != null">
        property_name,
      </if>
      <if test="matchFunction != null">
        match_function,
      </if>
      <if test="matchCondition != null">
        match_condition,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="propertyId != null">
        #{propertyId,jdbcType=INTEGER},
      </if>
      <if test="positiveGrede != null">
        #{positiveGrede,jdbcType=INTEGER},
      </if>
      <if test="negativeGrade != null">
        #{negativeGrade,jdbcType=INTEGER},
      </if>
      <if test="threshold != null">
        #{threshold,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=INTEGER},
      </if>
      <if test="lastUpdateTime != null">
        #{lastUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=INTEGER},
      </if>
      <if test="isDeleted != null">
        #{isDeleted,jdbcType=SMALLINT},
      </if>
      <if test="sort != null">
        #{sort,jdbcType=INTEGER},
      </if>
      <if test="propertyCode != null">
        #{propertyCode,jdbcType=VARCHAR},
      </if>
      <if test="propertyName != null">
        #{propertyName,jdbcType=VARCHAR},
      </if>
      <if test="matchFunction != null">
        #{matchFunction,jdbcType=LONGVARCHAR},
      </if>
      <if test="matchCondition != null">
        #{matchCondition,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="empi.core.model.MatchFactorExample" resultType="java.lang.Long">
    select count(*) from match_factor
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update match_factor
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.propertyId != null">
        property_id = #{record.propertyId,jdbcType=INTEGER},
      </if>
      <if test="record.positiveGrede != null">
        positive_grede = #{record.positiveGrede,jdbcType=INTEGER},
      </if>
      <if test="record.negativeGrade != null">
        negative_grade = #{record.negativeGrade,jdbcType=INTEGER},
      </if>
      <if test="record.threshold != null">
        threshold = #{record.threshold,jdbcType=DECIMAL},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createBy != null">
        create_by = #{record.createBy,jdbcType=INTEGER},
      </if>
      <if test="record.lastUpdateTime != null">
        last_update_time = #{record.lastUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateBy != null">
        update_by = #{record.updateBy,jdbcType=INTEGER},
      </if>
      <if test="record.isDeleted != null">
        is_deleted = #{record.isDeleted,jdbcType=SMALLINT},
      </if>
      <if test="record.sort != null">
        sort = #{record.sort,jdbcType=INTEGER},
      </if>
      <if test="record.propertyCode != null">
        property_code = #{record.propertyCode,jdbcType=VARCHAR},
      </if>
      <if test="record.propertyName != null">
        property_name = #{record.propertyName,jdbcType=VARCHAR},
      </if>
      <if test="record.matchFunction != null">
        match_function = #{record.matchFunction,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.matchCondition != null">
        match_condition = #{record.matchCondition,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update match_factor
    set id = #{record.id,jdbcType=INTEGER},
      property_id = #{record.propertyId,jdbcType=INTEGER},
      positive_grede = #{record.positiveGrede,jdbcType=INTEGER},
      negative_grade = #{record.negativeGrade,jdbcType=INTEGER},
      threshold = #{record.threshold,jdbcType=DECIMAL},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=INTEGER},
      last_update_time = #{record.lastUpdateTime,jdbcType=TIMESTAMP},
      update_by = #{record.updateBy,jdbcType=INTEGER},
      is_deleted = #{record.isDeleted,jdbcType=SMALLINT},
      sort = #{record.sort,jdbcType=INTEGER},
      property_code = #{record.propertyCode,jdbcType=VARCHAR},
      property_name = #{record.propertyName,jdbcType=VARCHAR},
      match_function = #{record.matchFunction,jdbcType=LONGVARCHAR},
      match_condition = #{record.matchCondition,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update match_factor
    set id = #{record.id,jdbcType=INTEGER},
      property_id = #{record.propertyId,jdbcType=INTEGER},
      positive_grede = #{record.positiveGrede,jdbcType=INTEGER},
      negative_grade = #{record.negativeGrade,jdbcType=INTEGER},
      threshold = #{record.threshold,jdbcType=DECIMAL},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=INTEGER},
      last_update_time = #{record.lastUpdateTime,jdbcType=TIMESTAMP},
      update_by = #{record.updateBy,jdbcType=INTEGER},
      is_deleted = #{record.isDeleted,jdbcType=SMALLINT},
      sort = #{record.sort,jdbcType=INTEGER},
      property_code = #{record.propertyCode,jdbcType=VARCHAR},
      property_name = #{record.propertyName,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="empi.core.model.MatchFactor">
    update match_factor
    <set>
      <if test="propertyId != null">
        property_id = #{propertyId,jdbcType=INTEGER},
      </if>
      <if test="positiveGrede != null">
        positive_grede = #{positiveGrede,jdbcType=INTEGER},
      </if>
      <if test="negativeGrade != null">
        negative_grade = #{negativeGrade,jdbcType=INTEGER},
      </if>
      <if test="threshold != null">
        threshold = #{threshold,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=INTEGER},
      </if>
      <if test="lastUpdateTime != null">
        last_update_time = #{lastUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=INTEGER},
      </if>
      <if test="isDeleted != null">
        is_deleted = #{isDeleted,jdbcType=SMALLINT},
      </if>
      <if test="sort != null">
        sort = #{sort,jdbcType=INTEGER},
      </if>
      <if test="propertyCode != null">
        property_code = #{propertyCode,jdbcType=VARCHAR},
      </if>
      <if test="propertyName != null">
        property_name = #{propertyName,jdbcType=VARCHAR},
      </if>
      <if test="matchFunction != null">
        match_function = #{matchFunction,jdbcType=LONGVARCHAR},
      </if>
      <if test="matchCondition != null">
        match_condition = #{matchCondition,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="empi.core.model.MatchFactor">
    update match_factor
    set property_id = #{propertyId,jdbcType=INTEGER},
      positive_grede = #{positiveGrede,jdbcType=INTEGER},
      negative_grade = #{negativeGrade,jdbcType=INTEGER},
      threshold = #{threshold,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=INTEGER},
      last_update_time = #{lastUpdateTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=INTEGER},
      is_deleted = #{isDeleted,jdbcType=SMALLINT},
      sort = #{sort,jdbcType=INTEGER},
      property_code = #{propertyCode,jdbcType=VARCHAR},
      property_name = #{propertyName,jdbcType=VARCHAR},
      match_function = #{matchFunction,jdbcType=LONGVARCHAR},
      match_condition = #{matchCondition,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="empi.core.model.MatchFactor">
    update match_factor
    set property_id = #{propertyId,jdbcType=INTEGER},
      positive_grede = #{positiveGrede,jdbcType=INTEGER},
      negative_grade = #{negativeGrade,jdbcType=INTEGER},
      threshold = #{threshold,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=INTEGER},
      last_update_time = #{lastUpdateTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=INTEGER},
      is_deleted = #{isDeleted,jdbcType=SMALLINT},
      sort = #{sort,jdbcType=INTEGER},
      property_code = #{propertyCode,jdbcType=VARCHAR},
      property_name = #{propertyName,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>